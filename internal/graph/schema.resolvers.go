package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"

	"github.com/teste-transfeera/internal/usecase"
)

// CreateReceiver is the resolver for the createReceiver field.
func (r *mutationResolver) CreateReceiver(ctx context.Context, input NewReceiver) (*Receiver, error) {
	usecaseInput := &usecase.CreateReceiverInput{
		Name:       input.Name,
		Email:      input.Email,
		Identifier: input.Identifier,
		PixKeyType: string(input.PixKeyType),
		PixKey:     input.PixKey,
	}

	result, err := r.ReceiverUseCases.Create(usecaseInput)
	if err != nil {
		return nil, err
	}

	return ToOutput(*result), err
}

// Receivers is the resolver for the receivers field.
func (r *queryResolver) Receivers(ctx context.Context) ([]*Receiver, error) {
	result, err := r.ReceiverUseCases.List()
	if err != nil {
		return nil, err
	}

	var output []*Receiver
	for _, entity := range result {
		output = append(output, ToOutput(entity))
	}
	return output, err
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
