// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	graph "github.com/teste-transfeera/internal/graph"
)

// QueryResolver is an autogenerated mock type for the QueryResolver type
type QueryResolver struct {
	mock.Mock
}

// ListReceivers provides a mock function with given fields: ctx, first, after, status, name, keyType, key
func (_m *QueryResolver) ListReceivers(ctx context.Context, first *int, after *string, status *string, name *string, keyType *string, key *string) (*graph.Receivers, error) {
	ret := _m.Called(ctx, first, after, status, name, keyType, key)

	var r0 *graph.Receivers
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *int, *string, *string, *string, *string, *string) (*graph.Receivers, error)); ok {
		return rf(ctx, first, after, status, name, keyType, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *int, *string, *string, *string, *string, *string) *graph.Receivers); ok {
		r0 = rf(ctx, first, after, status, name, keyType, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*graph.Receivers)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *int, *string, *string, *string, *string, *string) error); ok {
		r1 = rf(ctx, first, after, status, name, keyType, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Receiver provides a mock function with given fields: ctx, id
func (_m *QueryResolver) Receiver(ctx context.Context, id string) (*graph.Receiver, error) {
	ret := _m.Called(ctx, id)

	var r0 *graph.Receiver
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*graph.Receiver, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *graph.Receiver); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*graph.Receiver)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewQueryResolver interface {
	mock.TestingT
	Cleanup(func())
}

// NewQueryResolver creates a new instance of QueryResolver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewQueryResolver(t mockConstructorTestingTNewQueryResolver) *QueryResolver {
	mock := &QueryResolver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
