// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	graph "github.com/teste-transfeera/internal/graph"
)

// MutationResolver is an autogenerated mock type for the MutationResolver type
type MutationResolver struct {
	mock.Mock
}

// CreateReceiver provides a mock function with given fields: ctx, input
func (_m *MutationResolver) CreateReceiver(ctx context.Context, input graph.NewReceiver) (*graph.Receiver, error) {
	ret := _m.Called(ctx, input)

	var r0 *graph.Receiver
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, graph.NewReceiver) (*graph.Receiver, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, graph.NewReceiver) *graph.Receiver); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*graph.Receiver)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, graph.NewReceiver) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteReceivers provides a mock function with given fields: ctx, ids
func (_m *MutationResolver) DeleteReceivers(ctx context.Context, ids []string) (string, error) {
	ret := _m.Called(ctx, ids)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) (string, error)); ok {
		return rf(ctx, ids)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) string); ok {
		r0 = rf(ctx, ids)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateReceiver provides a mock function with given fields: ctx, input
func (_m *MutationResolver) UpdateReceiver(ctx context.Context, input graph.UpdateReceiver) (string, error) {
	ret := _m.Called(ctx, input)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, graph.UpdateReceiver) (string, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, graph.UpdateReceiver) string); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, graph.UpdateReceiver) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMutationResolver interface {
	mock.TestingT
	Cleanup(func())
}

// NewMutationResolver creates a new instance of MutationResolver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMutationResolver(t mockConstructorTestingTNewMutationResolver) *MutationResolver {
	mock := &MutationResolver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
